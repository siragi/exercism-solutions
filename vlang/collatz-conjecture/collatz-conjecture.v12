module main

fn collatz(number int) !int {
	if number < 1 {
		return error("invalid ${number} must be > 0")
	}
	return steps(0, number)
}


/*
 
If n is even, divide n by 2 to get n / 2.
If n is odd, multiply n by 3 and add 1 to get 3n + 1.
Repeat the process indefinitely.
The conjecture states that no matter which number you start with, you will always reach 1 eventually.
 
*/
fn steps(step int, number int) int {
	

	if number == 1 {
		return step
	}	
	if number & 0b1 == 0 {
		return steps(step + 1, number / 2)
	} else {
		return steps(step + 1, number * 3 + 1)
	}
}
